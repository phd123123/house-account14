from flask import Flask, render_template, request, redirect, url_for, flash, session, jsonify
from werkzeug.security import generate_password_hash, check_password_hash
import sqlite3
from datetime import datetime, timedelta
import os
from functools import wraps

app = Flask(__name__)
app.secret_key = 'your-secret-key-here'  # 在生产环境中应该使用更安全的密钥

# 数据库初始化
def init_db():
    conn = sqlite3.connect('family_accounting.db')
    cursor = conn.cursor()
    
    # 创建用户表
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            username TEXT UNIQUE NOT NULL,
            password_hash TEXT NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # 创建收支分类表
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS categories (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            type TEXT NOT NULL CHECK (type IN ('income', 'expense')),
            user_id INTEGER,
            FOREIGN KEY (user_id) REFERENCES users (id)
        )
    ''')
    
    # 创建收支记录表
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS transactions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            amount REAL NOT NULL,
            description TEXT,
            category_id INTEGER,
            user_id INTEGER,
            transaction_date DATE NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (category_id) REFERENCES categories (id),
            FOREIGN KEY (user_id) REFERENCES users (id)
        )
    ''')
    
    # 检查是否已经有系统分类，如果没有才插入默认分类
    existing_system_categories = cursor.execute(
        'SELECT COUNT(*) FROM categories WHERE user_id IS NULL'
    ).fetchone()[0]
    
    if existing_system_categories == 0:
        # 插入默认分类
        default_categories = [
            ('工资', 'income'),
            ('奖金', 'income'),
            ('投资收益', 'income'),
            ('其他收入', 'income'),
            ('餐饮', 'expense'),
            ('交通', 'expense'),
            ('购物', 'expense'),
            ('娱乐', 'expense'),
            ('医疗', 'expense'),
            ('教育', 'expense'),
            ('房租', 'expense'),
            ('水电费', 'expense'),
            ('其他支出', 'expense')
        ]
        
        for name, type_ in default_categories:
            cursor.execute('INSERT INTO categories (name, type, user_id) VALUES (?, ?, NULL)', (name, type_))
    
    conn.commit()
    conn.close()

def clean_duplicate_categories():
    """清理重复的系统分类"""
    conn = sqlite3.connect('family_accounting.db')
    cursor = conn.cursor()
    
    # 获取所有重复的系统分类
    duplicates = cursor.execute('''
        SELECT name, type, MIN(id) as keep_id
        FROM categories 
        WHERE user_id IS NULL
        GROUP BY name, type
        HAVING COUNT(*) > 1
    ''').fetchall()
    
    for duplicate in duplicates:
        name, type_, keep_id = duplicate
        # 删除除了最小ID之外的所有重复分类
        cursor.execute('''
            DELETE FROM categories 
            WHERE name = ? AND type = ? AND user_id IS NULL AND id != ?
        ''', (name, type_, keep_id))
    
    conn.commit()
    conn.close()
    return len(duplicates)

# 登录验证装饰器
def login_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if 'user_id' not in session:
            return redirect(url_for('login'))
        return f(*args, **kwargs)
    return decorated_function

# 获取数据库连接
def get_db_connection():
    conn = sqlite3.connect('family_accounting.db')
    conn.row_factory = sqlite3.Row
    return conn

@app.route('/')
def index():
    if 'user_id' not in session:
        return redirect(url_for('login'))
    return redirect(url_for('dashboard'))

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        
        conn = get_db_connection()
        user = conn.execute('SELECT * FROM users WHERE username = ?', (username,)).fetchone()
        conn.close()
        
        if user and check_password_hash(user['password_hash'], password):
            session['user_id'] = user['id']
            session['username'] = user['username']
            flash('登录成功！', 'success')
            return redirect(url_for('dashboard'))
        else:
            flash('用户名或密码错误！', 'error')
    
    return render_template('login.html')

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        confirm_password = request.form['confirm_password']
        
        if password != confirm_password:
            flash('两次输入的密码不一致！', 'error')
            return render_template('register.html')
        
        conn = get_db_connection()
        existing_user = conn.execute('SELECT id FROM users WHERE username = ?', (username,)).fetchone()
        
        if existing_user:
            flash('用户名已存在！', 'error')
            conn.close()
            return render_template('register.html')
        
        password_hash = generate_password_hash(password)
        conn.execute('INSERT INTO users (username, password_hash) VALUES (?, ?)', 
                    (username, password_hash))
        conn.commit()
        conn.close()
        
        flash('注册成功！请登录。', 'success')
        return redirect(url_for('login'))
    
    return render_template('register.html')

@app.route('/logout')
def logout():
    session.clear()
    flash('已退出登录！', 'info')
    return redirect(url_for('login'))

@app.route('/dashboard')
@login_required
def dashboard():
    conn = get_db_connection()
    
    # 获取本月收支统计
    current_month = datetime.now().strftime('%Y-%m')
    
    # 本月收入
    income = conn.execute('''
        SELECT COALESCE(SUM(t.amount), 0) as total
        FROM transactions t
        JOIN categories c ON t.category_id = c.id
        WHERE t.user_id = ? AND c.type = 'income' 
        AND strftime('%Y-%m', t.transaction_date) = ?
    ''', (session['user_id'], current_month)).fetchone()
    
    # 本月支出
    expense = conn.execute('''
        SELECT COALESCE(SUM(t.amount), 0) as total
        FROM transactions t
        JOIN categories c ON t.category_id = c.id
        WHERE t.user_id = ? AND c.type = 'expense' 
        AND strftime('%Y-%m', t.transaction_date) = ?
    ''', (session['user_id'], current_month)).fetchone()
    
    # 最近交易记录
    recent_transactions = conn.execute('''
        SELECT t.*, c.name as category_name, c.type as category_type
        FROM transactions t
        JOIN categories c ON t.category_id = c.id
        WHERE t.user_id = ?
        ORDER BY t.transaction_date DESC, t.created_at DESC
        LIMIT 10
    ''', (session['user_id'],)).fetchall()
    
    conn.close()
    
    return render_template('dashboard.html', 
                         income=income['total'],
                         expense=expense['total'],
                         balance=income['total'] - expense['total'],
                         recent_transactions=recent_transactions)

@app.route('/transactions')
@login_required
def transactions():
    conn = get_db_connection()
    
    # 获取查询参数
    category_id = request.args.get('category_id')
    start_date = request.args.get('start_date')
    end_date = request.args.get('end_date')
    transaction_type = request.args.get('type')
    
    # 构建查询
    query = '''
        SELECT t.*, c.name as category_name, c.type as category_type
        FROM transactions t
        JOIN categories c ON t.category_id = c.id
        WHERE t.user_id = ?
    '''
    params = [session['user_id']]
    
    if category_id:
        query += ' AND t.category_id = ?'
        params.append(category_id)
    
    if start_date:
        query += ' AND t.transaction_date >= ?'
        params.append(start_date)
    
    if end_date:
        query += ' AND t.transaction_date <= ?'
        params.append(end_date)
    
    if transaction_type:
        query += ' AND c.type = ?'
        params.append(transaction_type)
    
    query += ' ORDER BY t.transaction_date DESC, t.created_at DESC'
    
    transactions = conn.execute(query, params).fetchall()
    
    # 获取所有分类用于筛选
    categories = conn.execute('''
        SELECT * FROM categories 
        WHERE user_id = ? OR user_id IS NULL
        ORDER BY type, name
    ''', (session['user_id'],)).fetchall()
    
    conn.close()
    
    return render_template('transactions.html', 
                         transactions=transactions,
                         categories=categories)

@app.route('/add_transaction', methods=['GET', 'POST'])
@login_required
def add_transaction():
    if request.method == 'POST':
        amount = float(request.form['amount'])
        description = request.form['description']
        category_id = int(request.form['category_id'])
        transaction_date = request.form['transaction_date']
        
        conn = get_db_connection()
        conn.execute('''
            INSERT INTO transactions (amount, description, category_id, user_id, transaction_date)
            VALUES (?, ?, ?, ?, ?)
        ''', (amount, description, category_id, session['user_id'], transaction_date))
        conn.commit()
        conn.close()
        
        flash('交易记录添加成功！', 'success')
        return redirect(url_for('transactions'))
    
    # GET请求，显示添加表单
    conn = get_db_connection()
    categories = conn.execute('''
        SELECT * FROM categories 
        WHERE user_id = ? OR user_id IS NULL
        ORDER BY type, name
    ''', (session['user_id'],)).fetchall()
    conn.close()
    
    return render_template('add_transaction.html', categories=categories)

@app.route('/edit_transaction/<int:transaction_id>', methods=['GET', 'POST'])
@login_required
def edit_transaction(transaction_id):
    conn = get_db_connection()
    
    if request.method == 'POST':
        amount = float(request.form['amount'])
        description = request.form['description']
        category_id = int(request.form['category_id'])
        transaction_date = request.form['transaction_date']
        
        conn.execute('''
            UPDATE transactions 
            SET amount = ?, description = ?, category_id = ?, transaction_date = ?
            WHERE id = ? AND user_id = ?
        ''', (amount, description, category_id, transaction_date, transaction_id, session['user_id']))
        conn.commit()
        conn.close()
        
        flash('交易记录更新成功！', 'success')
        return redirect(url_for('transactions'))
    
    # GET请求，显示编辑表单
    transaction = conn.execute('''
        SELECT * FROM transactions 
        WHERE id = ? AND user_id = ?
    ''', (transaction_id, session['user_id'])).fetchone()
    
    if not transaction:
        flash('交易记录不存在！', 'error')
        return redirect(url_for('transactions'))
    
    categories = conn.execute('''
        SELECT * FROM categories 
        WHERE user_id = ? OR user_id IS NULL
        ORDER BY type, name
    ''', (session['user_id'],)).fetchall()
    
    conn.close()
    
    return render_template('edit_transaction.html', 
                         transaction=transaction, 
                         categories=categories)

@app.route('/delete_transaction/<int:transaction_id>')
@login_required
def delete_transaction(transaction_id):
    conn = get_db_connection()
    conn.execute('DELETE FROM transactions WHERE id = ? AND user_id = ?', 
                (transaction_id, session['user_id']))
    conn.commit()
    conn.close()
    
    flash('交易记录删除成功！', 'success')
    return redirect(url_for('transactions'))

@app.route('/categories')
@login_required
def categories():
    conn = get_db_connection()
    categories = conn.execute('''
        SELECT * FROM categories 
        WHERE user_id = ? OR user_id IS NULL
        ORDER BY type, name
    ''', (session['user_id'],)).fetchall()
    conn.close()
    
    return render_template('categories.html', categories=categories)

@app.route('/add_category', methods=['POST'])
@login_required
def add_category():
    name = request.form['name']
    category_type = request.form['type']
    
    conn = get_db_connection()
    conn.execute('INSERT INTO categories (name, type, user_id) VALUES (?, ?, ?)',
                (name, category_type, session['user_id']))
    conn.commit()
    conn.close()
    
    flash('分类添加成功！', 'success')
    return redirect(url_for('categories'))

@app.route('/statistics')
@login_required
def statistics():
    conn = get_db_connection()
    
    # 获取查询参数
    year = request.args.get('year', datetime.now().year)
    month = request.args.get('month')
    
    # 按分类统计
    if month:
        date_filter = f"{year}-{month:02d}" if isinstance(month, int) else f"{year}-{month}"
        category_stats = conn.execute('''
            SELECT c.name, c.type, COALESCE(SUM(t.amount), 0) as total
            FROM categories c
            LEFT JOIN transactions t ON c.id = t.category_id 
                AND t.user_id = ? 
                AND strftime('%Y-%m', t.transaction_date) = ?
            WHERE c.user_id = ? OR c.user_id IS NULL
            GROUP BY c.id, c.name, c.type
            HAVING total > 0
            ORDER BY c.type, total DESC
        ''', (session['user_id'], date_filter, session['user_id'])).fetchall()
    else:
        category_stats = conn.execute('''
            SELECT c.name, c.type, COALESCE(SUM(t.amount), 0) as total
            FROM categories c
            LEFT JOIN transactions t ON c.id = t.category_id 
                AND t.user_id = ? 
                AND strftime('%Y', t.transaction_date) = ?
            WHERE c.user_id = ? OR c.user_id IS NULL
            GROUP BY c.id, c.name, c.type
            HAVING total > 0
            ORDER BY c.type, total DESC
        ''', (session['user_id'], str(year), session['user_id'])).fetchall()
    
    # 按月份统计（年度视图）
    monthly_stats = conn.execute('''
        SELECT 
            strftime('%Y-%m', t.transaction_date) as month,
            c.type,
            SUM(t.amount) as total
        FROM transactions t
        JOIN categories c ON t.category_id = c.id
        WHERE t.user_id = ? AND strftime('%Y', t.transaction_date) = ?
        GROUP BY month, c.type
        ORDER BY month
    ''', (session['user_id'], str(year))).fetchall()
    
    conn.close()
    
    return render_template('statistics.html', 
                         category_stats=category_stats,
                         monthly_stats=monthly_stats,
                         current_year=year,
                         current_month=month)

@app.route('/clean_categories')
@login_required
def clean_categories():
    """清理重复的系统分类"""
    try:
        cleaned_count = clean_duplicate_categories()
        if cleaned_count > 0:
            flash(f'已清理 {cleaned_count} 个重复的系统分类！', 'success')
        else:
            flash('没有发现重复的系统分类。', 'info')
    except Exception as e:
        flash(f'清理失败：{str(e)}', 'error')
    
    return redirect(url_for('categories'))

if __name__ == '__main__':
    init_db()
    # 启动时清理重复分类
    try:
        cleaned_count = clean_duplicate_categories()
        if cleaned_count > 0:
            print(f"启动时清理了 {cleaned_count} 个重复的系统分类")
    except Exception as e:
        print(f"清理重复分类时出错：{e}")
    
    # 配置为可在公网访问
    # host='0.0.0.0' 允许外部访问
    # port=5000 默认端口，可根据需要修改
    # debug=False 生产环境建议关闭调试模式
    app.run(host='0.0.0.0', port=5000, debug=False) 